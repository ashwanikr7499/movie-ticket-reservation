#include<bits/stdc++.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>
#include <pthread.h>
#define noofmovies 100 //Number of movies
#define capofmovie 500 //Capacity of each movie
#define noofwt 20 //Number of worker threads
#define MAX 5 //Max queries at any time
#define T 10000 //Total running time in seconds
#define INQUIRE 1
#define BOOK 2
#define CANCEL 3
#define SLEEPTIME 100
using namespace std;
/* Data type for parameters to be passed to worker threads during start up */
typedef struct
{
     int movieno;
     char moviename[5];
     int show_timehh;
     int show_timemm;
} movieinfo;
int numActiveQueries = 0;//Number of active queries
//{movie number, query type, thread number}
int activeQueries[MAX][3];//The currently active queries
int * movies;//movies[i] = number of seats available in movie i
int * timehh;
int * timemm;
pthread_barrier_t barrier; // barrier synchronization object
/* mutex for mutually exclusive updating of the table activeQueries */
pthread_mutex_t csmutex;
/* mutex and condition variables for checking active queries less than MAX */
pthread_mutex_t querymutex;
pthread_cond_t querycond;
/* mutex and condition variables for winding up */
pthread_mutex_t donemutex;
pthread_cond_t donecond;
int mdone = 0, wdone = 0;

void inquiry(int no)
{

     int i, otherThread, otherQueryType;
     int movieNumber = rand()%noofmovies;
     pthread_mutex_lock(&csmutex);//activeQueries is shared table

         cout<<"Movie no. "<<movieNumber<<endl;
         for(i=0;i<MAX;++i)
         {
             if(activeQueries[i][0]==movieNumber && activeQueries[i][1] != INQUIRE)//Write query onsame movie is active
             {
                 otherQueryType = activeQueries[i][1];
                 otherThread = activeQueries[i][2];
                 break;
             }
         }
     pthread_mutex_unlock(&csmutex);
     if(i != MAX)//Failed
     {
         char otherQuery[20];
         if(otherQueryType == BOOK)
         strcpy(otherQuery, "booking");
         else
         strcpy(otherQuery, "cancellation");
         printf("\nThread %d : Inquire Query on movie %d failed since thread %d is making %s query\n",no, movieNumber, otherThread, otherQuery);
         return;
     }
     //Fill an empty entry
     int entry;
     pthread_mutex_lock(&csmutex);//activeQueries is shared table

         for(i=0;i<MAX;++i)
         {
             if(activeQueries[i][0] == -1)//Empty entry
             {
                 entry = i;
                 activeQueries[i][0] = movieNumber;
                 activeQueries[i][1] = INQUIRE;
                 activeQueries[i][2] = no;
                 break;
             }
         }
     pthread_mutex_unlock(&csmutex);
     printf("\nThread %d : Begin Inquiry about movie %d\n", no, movieNumber);
     usleep(SLEEPTIME);
     printf("\nThread %d : Number of seats in movie %d is %d\n", no, movieNumber,movies[movieNumber]);
     pthread_mutex_lock(&csmutex);
         if(entry >= MAX || entry <= -1*MAX)
         entry = rand()%MAX;
         activeQueries[entry][0] = -1;//Empty the corresponding entry ,ticket inquiry completed
     pthread_mutex_unlock(&csmutex);
}
void inquiryshowtime(int no)
{

     int i, otherThread, otherQueryType;
     int movieNumber = rand()%noofmovies;
     pthread_mutex_lock(&csmutex);//activeQueries is shared table

         cout<<"Movie no. "<<movieNumber<<endl;
         for(i=0;i<MAX;++i)
         {
             if(activeQueries[i][0]==movieNumber && activeQueries[i][1] != INQUIRE)//Write query onsame movie is active
             {
                 otherQueryType = activeQueries[i][1];
                 otherThread = activeQueries[i][2];
                 break;
             }
         }
     pthread_mutex_unlock(&csmutex);
     if(i != MAX)//Failed
     {
         char otherQuery[20];
         if(otherQueryType == BOOK)
         strcpy(otherQuery, "booking");
         else
         strcpy(otherQuery, "cancellation");
         printf("\nThread %d : Inquire Query on movie %d failed since thread %d is making %s query\n",no, movieNumber, otherThread, otherQuery);
         return;
     }
     //Fill an empty entry
     int entry;
     pthread_mutex_lock(&csmutex);//activeQueries is shared table

         for(i=0;i<MAX;++i)
         {
             if(activeQueries[i][0] == -1)//Empty entry
             {
                 entry = i;
                 activeQueries[i][0] = movieNumber;
                 activeQueries[i][1] = INQUIRE;
                 activeQueries[i][2] = no;
                 break;
             }
         }
     pthread_mutex_unlock(&csmutex);
     printf("\nThread %d : Begin Inquiry about movie %d\n", no, movieNumber);
     usleep(SLEEPTIME);
     cout<<"\nThread "<<no << "Show time of movie "<<movieNumber<< "is"<< timehh[movieNumber]<<":"<<timemm[movieNumber]<<endl;
     pthread_mutex_lock(&csmutex);
         if(entry >= MAX || entry <= -1*MAX)
         entry = rand()%MAX;
         activeQueries[entry][0] = -1;//Empty the corresponding entry ,ticket inquiry completed
     pthread_mutex_unlock(&csmutex);
}
void booking(int no, int isBooked[], int moviesBooked[], int * nummoviesBooked)
{
     int i, otherThread, otherQueryType;
     int movieNumber = rand()%noofmovies;

     pthread_mutex_lock(&csmutex);//active Queries is shared table
         for(i=0;i<MAX;++i)
         {
             if(activeQueries[i][0]==movieNumber)//Another query on same movie
             {
                 otherQueryType = activeQueries[i][1];
                 otherThread = activeQueries[i][2];
                 break;
             }
         }
     pthread_mutex_unlock(&csmutex);
     if(i != MAX)//Failed
     {
         char otherQuery[20];
         if(otherQueryType == INQUIRE)
         strcpy(otherQuery, "inquire");
         else if(otherQueryType == BOOK)
         strcpy(otherQuery, "booking");
         else
         strcpy(otherQuery, "cancellation");
         printf("\nThread %d : Booking Query on movie %d failed since thread %d is making %s query\n", no, movieNumber, otherThread, otherQuery);
         return;
     }
     //Fill an empty entry
     int entry;
     pthread_mutex_lock(&csmutex);//activeQueries is shared table
         for(i=0;i<MAX;++i)
         {
             if(activeQueries[i][0] == -1)//Empty entry
             {
                 entry = i;
                 activeQueries[i][0] = movieNumber;
                 activeQueries[i][1] = BOOK;
                 activeQueries[i][2] = no;
                 break;
             }
         }
     pthread_mutex_unlock(&csmutex);
     int k = 1+rand()%10;//Number of seats to book[1,10]
     if(k > movies[movieNumber])
     {
         cout<<"trying to book"<<k<<"tickets for movie no. "<<movieNumber;
         printf("\nThread %d : %d tickets not available for movie %d\n", no, k, movieNumber);
         return;
     }
     printf("\nThread %d : Begin Booking %d tickets in movie %d\n", no, k, movieNumber);
     usleep(SLEEPTIME);
     //Modify data

     if(isBooked[movieNumber] == 0)//First booking
     {
         moviesBooked[*nummoviesBooked] = movieNumber;
         (*nummoviesBooked)++;
     }
     isBooked[movieNumber] += k;//k tickets more booked
     movies[movieNumber] -= k;//Reduce number of available tickets
     printf("\nThread %d : End Booking %d tickets in movie %d\n", no, k, movieNumber);
     pthread_mutex_lock(&csmutex);
     if(entry >= MAX || entry <= -1*MAX)
     entry = rand()%MAX;
     activeQueries[entry][0] = -1;//Empty the corresponding entry
     pthread_mutex_unlock(&csmutex);
}
void cancellation(int no, int isBooked[], int moviesBooked[], int * nummoviesBooked)
{
         int i, otherThread, otherQueryType;
         if((*nummoviesBooked) == 0)//This thread has not yet booked any ticket
         {
             printf("\nThread %d : Cannot Cancel Ticket : Has not booked any tickets yet\n", no);
             return;
         }

         int ticketToCancel = rand()%(*nummoviesBooked);//Choose a movie index to cancel
         int movieNumber = moviesBooked[ticketToCancel];
         while(isBooked[movieNumber] == 0)//All cancelled
         {
             ticketToCancel = rand()%(*nummoviesBooked);
             movieNumber = moviesBooked[ticketToCancel];
         }

         pthread_mutex_lock(&csmutex);//active Queries is shared table
                 for(i=0;i<MAX;++i)
                 {
                     if(activeQueries[i][0]==movieNumber)//Another query on same movie
                     {
                         otherQueryType = activeQueries[i][1];
                         otherThread = activeQueries[i][2];
                         break;
                     }
                 }
         pthread_mutex_unlock(&csmutex);
         if(i != MAX)//Failed
         {
             char otherQuery[20];
             if(otherQueryType == INQUIRE)
             strcpy(otherQuery, "inquire");
             else if(otherQueryType == BOOK)
             strcpy(otherQuery, "booking");
             else
             strcpy(otherQuery, "cancellation");
             printf("\nThread %d : Cancellation Query on movie %d failed since thread %d is making %squery\n", no, movieNumber, otherThread, otherQuery);
             return;
         }
        //Fill an empty entry
         int entry;
         pthread_mutex_lock(&csmutex);//activeQueries is shared table
                 for(i=0;i<MAX;++i)
                 {
                     //printf("thread %d : inside queries = %d\n", no, numActiveQueries);
                     if(activeQueries[i][0] == -1)//Empty entry
                     {
                         entry = i;
                         activeQueries[i][0] = movieNumber;
                         activeQueries[i][1] = CANCEL;
                         activeQueries[i][2] = no;
                         break;
                     }
                 }
         pthread_mutex_unlock(&csmutex);
         printf("\nThread %d : Begin Cancellation of ticket from movie %d\n", no, movieNumber);
         usleep(SLEEPTIME);
         //Modify data
         isBooked[movieNumber]--;//cancel a ticket
         movies[movieNumber]++;//Increase number of available tickets
         printf("\nThread %d : End Cancellation of ticket from movie %d\n", no, movieNumber);

         pthread_mutex_lock(&csmutex);
         if(entry >= MAX || entry <= -1*MAX)
         entry = rand()%MAX;
         activeQueries[entry][0] = -1;//Empty the corresponding entry
         pthread_mutex_unlock(&csmutex);
}
/* This is the main function for a worker thread */
/* A worker thread receives a number and a 4-letter name via marg */
void * tmain(void * marg)
{
     /* Local variables are not shared with other threads */
     int no, i;
     char name[5];
     pthread_t movieid;
     int isBooked[noofmovies];//Tells how many times movie i has been booked by this thread.
     memset(isBooked, 0, sizeof(isBooked));
     int moviesBooked[noofmovies];//Tells which all movies have been booked by this thread
     int nummoviesBooked = 0;//Count of the number of movies booked by this thread

     /* Retrieve my number and name from the parameter passed */
     no = ((movieinfo *)marg) -> movieno;
     strcpy(name,((movieinfo *)marg) -> moviename);
     /* Retrieve my thread id */
     movieid = pthread_self();
    while (1)
    {
         /* Check for termination condition */
         pthread_mutex_lock(&donemutex);
         /* if the master thread is done */
         if(mdone)
         {
             pthread_mutex_unlock(&donemutex);
             pthread_barrier_wait(&barrier);
             pthread_exit(NULL);
         }
         /* The master thread is still sleeping, so I continue to work */
         pthread_mutex_unlock(&donemutex);
         //Check if number of active queries is less than MAX
         pthread_mutex_lock(&querymutex);
                 if(numActiveQueries == MAX)
                 {
                     printf("\nThread %d : Blocked since active queries = MAX\n", no);
                     pthread_cond_wait(&querycond, &querymutex);
                 }
                 numActiveQueries++;
         pthread_mutex_unlock(&querymutex);

         //Start query
         int queryType = 1 + rand()%4;
         if(queryType == INQUIRE)
         {
             cout<<"Inquiring..."<<endl;
             inquiry(no);
         }
         else if(queryType == BOOK)
         {
             cout<<"Booking..."<<endl;
             booking(no, isBooked, moviesBooked, &nummoviesBooked);
         }
         else if(queryType==3)
         {
             cout<<"Cancelling..."<<endl;
             cancellation(no, isBooked, moviesBooked, &nummoviesBooked);

         }
         else
         {
             cout<<"Inquiring show time..."<<endl;
             inquiryshowtime(no);
         }
         pthread_mutex_lock(&querymutex);
                 numActiveQueries--;
                 if(numActiveQueries == (MAX-1))//wake up a waiting query
                 pthread_cond_signal(&querycond);
         pthread_mutex_unlock(&querymutex);

         usleep(SLEEPTIME);
    }
}
/* Function to create s worker threads. Their thread ids are stored in movieid.
 The parameters (numbers and names) are stored in param. */
void create_workers(pthread_t *movieid, movieinfo *param)
{
     pthread_attr_t attr;
     int i, j;
     /* Set attributes for creating joinable threads */
     pthread_attr_init(&attr);
     pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_JOINABLE);
     /* Create worker threads in a loop */
     for (i=0; i<noofwt; ++i)
        {
             /* Set the number of the thread */
             param[i].movieno = i + 1;
             /* Set a random 4-letter name for the thread */
             for (j=0; j<4; ++j)
                param[i].moviename[j] = 'A' + rand() % 26;
             param[i].moviename[4] = '\0';


             /* Create thread with number and name passed as parameters */
             if (pthread_create(movieid + i, &attr, tmain, (void *)(param+i)))
             {
                 fprintf(stderr, "Master thread: Unable to create thread\n");
                 pthread_attr_destroy(&attr);
                 exit(1);
             }
        }
     /* Wait for a while to insure that all worker threads get the chance to be
     scheduled and read the correct local values defined in this function */
     usleep(SLEEPTIME);
     pthread_attr_destroy(&attr);
}
void create_mutex ()
{
     pthread_barrier_init (&barrier, NULL, noofwt+1);// no of worker threads
     pthread_mutex_init(&csmutex, NULL);//active queries no.
     pthread_mutex_init(&donemutex, NULL);// main thread no.
     pthread_mutex_init(&querymutex, NULL);//9999

     pthread_mutex_trylock(&csmutex); /* Try to lock mutex (non-blocking) */
     pthread_mutex_unlock(&csmutex); /* Now, unlock the mutex */
     pthread_mutex_trylock(&querymutex); /* Try to lock mutex (non-blocking) */
     pthread_mutex_unlock(&querymutex); /* Now, unlock the mutex */
     pthread_mutex_trylock(&donemutex); /* Try to lock mutex (non-blocking) */
     pthread_mutex_unlock(&donemutex); /* Now, unlock the mutex */
     /* Initialize condition variable */
     pthread_cond_init(&donecond, NULL);//bool
     pthread_cond_init(&querycond, NULL);//bool
}
void do_work(pthread_t *movieid, movieinfo *param)
{
     int i;
     /*Server runs for T seconds */
     usleep(T);
     /* At the end of work, the master thread sets the mdone flag */
     pthread_mutex_lock(&donemutex);
      mdone = 1;
     pthread_mutex_unlock(&donemutex);
     pthread_barrier_wait(&barrier);
     for (i=0; i<noofwt; ++i)
     {
         if (pthread_join(movieid[i],NULL))
         {
            fprintf(stderr, "Unable to wait for thread [%lu]\n", movieid[i]);
         }
     }
     printf("\n");
     printf("Reservation status : \n");
     for(i=0;i<noofmovies;++i)
     printf("movie %d : %d\n", i,movies[i]);
}
void wind_up ()
{
     /* Destroy mutex and condition variables */
     printf("\nWinding up\n\n");
     pthread_mutex_destroy(&csmutex);
     pthread_mutex_destroy(&querymutex);
     pthread_mutex_destroy(&donemutex);
     pthread_cond_destroy(&querycond);
     pthread_cond_destroy(&donecond);
}
int main ()
{
     srand((unsigned int)time(NULL));
     int i;
     //Creating and intializing movies
     movies = (int *)malloc(noofmovies*sizeof(int));
     timehh = (int *)malloc(noofmovies*sizeof(int));
     timemm = (int *)malloc(noofmovies*sizeof(int));
     for(i=0;i<noofmovies;++i)
     {
         movies[i] = capofmovie;
         timehh[i]=rand()%24;
         timemm[i]=rand()%60;
     }
     //Initialise all activeQueries movie number to -1
     for(i=0;i<MAX;++i)//all queries
     activeQueries[i][0] = -1;
     pthread_t movieid[noofwt];
     movieinfo param[noofwt];
     create_mutex();
     create_workers(movieid,param);
     do_work(movieid,param);
     wind_up();
     exit(0);
}
